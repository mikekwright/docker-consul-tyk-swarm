#!/usr/bin/env bash
# vi: ft=sh
SCRIPT_DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"

CONSUL=${CONSUL-consul}
MASTER=${MASTER-swarmmaster}
SLAVE1=${SLAVE1-swarms1}
SLAVE2=${SLAVE2-swarms2}
MASTER_PORT=${MASTER_PORT-3376}
REGISTRATOR_IMAGE=${REGISTRATOR_IMAGE-gliderlabs/registrator:latest}

#DOCKER_MACHINE_DRIVER=${DOCKER_MACHINE_DRIVER-xhyve}
DOCKER_MACHINE_DRIVER=${DOCKER_MACHINE_DRIVER-vmwarefusion}

machine_ip() {
  local name=$1
  echo $(docker-machine ip $name)
}

attach_docker_to_swarm() {
  local name=$1
  eval $(docker-machine env --swarm $name --shell bash)
}

attach_docker_to_machine() {
  local name=$1
  eval $(docker-machine env $name --shell bash)
}

install_registrator() {
  local name=$1
  local consule_ip=$2
  echo -e "installing registrator on $name"
  attach_docker_to_machine $name
  docker run -d --name=registrator --volume=/var/run/docker.sock:/tmp/docker.sock $REGISTRATOR_IMAGE consul://$consule_ip:8500
}

create_machine() {
  local name=$1
  local options=$2
  echo "Creating machine - $name"
  docker-machine create --driver $DOCKER_MACHINE_DRIVER --engine-opt tlsverify=false $options $name
  machine_ip $name
}

delete_machine() {
  local name=$1
  echo "Deleting machine - $name"
  docker-machine rm -y $name
}

clean_up() {
  delete_machine $MASTER 
  delete_machine $SLAVE1 
  delete_machine $SLAVE2 
  delete_machine $CONSUL
}

standup_consul() {
  local name=$1
  echo "Setting up consul - $name"
  attach_docker_to_machine $name
  $SCRIPT_DIR/consul-image/start-consul
}

setup_master() {
  local name=$1
  local consul_ip=$2
  echo "Setting up master - $name - consule @ $consul_ip"
  attach_docker_to_machine $name
  local master_ip=$(machine_ip $name)

  #docker run -d -p $MASTER_PORT:3376 -t -v /var/lib/boot2docker:/certs:ro swarm manage -H 0.0.0.0:3376 --tlsverify --tlscacert=/certs/ca.pem --tlscert=/certs/server.pem --tlskey=/certs/server-key.pem token://$cluster_id
  docker run -d -p $MASTER_PORT:3376 swarm manage -H 0.0.0.0:3376 consul://$
  echo $cluster_id
}

attach_slave() {
   local name=$1
   local cluster_id=$2
   echo "Setting up slave - $name"
   local ip=$(machine_ip $name)
   attach_docker_to_machine $name
   docker run -d swarm join --addr=$ip:2376 token://$cluster_id
}

start_service() {
  local swarm=$1
  local service_image=$2

  echo -e "Starting service in swarm $swarm - $service_image"
  attach_docker_to_swarm $swarm
  docker run -d -P $service_image
}

start_system() {
  create_machine $CONSUL
  standup_consul $CONSUL
  local consul_ip=$(machine_ip $CONSUL)

  create_machine $MASTER "--swarm --swarm-master --swarm-discovery consul://$consul_ip:8500/"
  create_machine $SLAVE1 "--swarm --swarm-discovery consul://$consul_ip:8500/"
  create_machine $SLAVE2 "--swarm --swarm-discovery consul://$consul_ip:8500/"
   
  install_registrator $MASTER $consul_ip
  install_registrator $SLAVE1 $consul_ip
  install_registrator $SLAVE2 $consul_ip

  start_service $MASTER redis

  #setup_master $MASTER
  #attach_slave $SLAVE1 $cluster_id
  #attach_slave $SLAVE2 $cluster_id
    # "--swarm --swarm-master --swarm-image 'swarm:latest' --swarm-host 'tcp://0.0.0.0:3376' --swarm-discovery token://$CLUSTER_ID"
    # "--swarm --swarm-discovery token://$CLUSTER_ID"
}

stop_system() {
  clean_up
}

if [[ $# == 0 ]]; then
  echo "Usage: $0 <start|stop>"
  exit 1
elif [[ $1 == "start" ]]; then
  start_system
elif [[ $1 == "stop" ]]; then
  stop_system
else
  echo "Usage: $0 <start|stop>"
  exit 2
fi
  


